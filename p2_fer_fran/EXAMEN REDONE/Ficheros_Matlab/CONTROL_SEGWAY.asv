clc
clear
close all
format short e
s=tf('s');
% Período de muestreo
ts = 5e-3;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%  PARAMETROS  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Los parámetros mecánicos están referidos al eje de la rueda
% Gravedad (m/s^2)
g=9.81;
%%%%%%%%%
% Motor %
%%%%%%%%%
% Resistencia en ohmios
Rm=4.5;
% Relacion de engranajes
n=48;
% Constante electrica (V.s)
Ke=0.01; 
% Constante mecanica (N.m/A)
Kt=Ke;
% Momento de inercia del motor (kg.m^2)
Im=3.75e-3;
% Par máximo de friccion (Nm)
Trmax=0.05;
% Friccion viscosa (N.m.s/rad)
Dm=0.0142;
%%%%%%%%%%
% Segway %
%%%%%%%%%%
% Masa del chasis (kg)
M = 0.6;
% Masa de la rueda + rotor (kg)
m = 0.034;
% Momento de inercia de cabeceo (kg.m^2)
Ith = 1.425e-3;
% Momento de inercia de la rueda + rotor (kg.m^2)
Imr = 3.2e-6+Im;
% Distancia vertical al c.d.g. desde el eje de la rueda (m)
h = 0.073;
% Distancia entre ruedas (m)
W = 0.15;
% Radio de la rueda (m)
R = 81.6e-3/2;
% Vector de parametros
param=[M m Ith Imr h W R Ke Rm Trmax Dm n];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Otros parametros del control %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Instante inicial de control (ms)
time_start = 1;
% Factor de filtrado de la medida de la velocidad
alfa1=0.8;
% Factor de filtrado en la calibración del giroscopo
alfa2=0.999;
% offset inicial del giroscopo
gyro0=615;
% Peso del giroscopo en el filtro complementario
Wfc=0.98;
% Frecuencia de la señal sonora (Hz)
sound_freq = 440;
% Duracion de la señal sonora (ms)
sound_dur =	500;
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%  LINEALIZACION DEL SISTEMA %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Añadir al fichero de Matlab (CONTROL_SEGWAY.m) donde se definen los
% parámetros el punto de operación correspondiente a la posición vertical
% del vehículo, con velocidad de avance nula, y linealizar el modelo en 
% dicho punto de operación

%__________________________________________________________________________
%                   PUNTO DE OPERCACION SIMULACION
%__________________________________________________________________________

%DEfinimos el punto de equilibrio/operacion _0
vo =0; %velocidad de avance (m/s)
wo= 0; %velocidad angular de cabeceo (rad/s)
tho = 0; %ángulo de cabeceo (grados)
X0=[vo wo tho*pi/180]';
U0=0;
%__________________________________________________________________________
%                   FUNCION DE TRANSFERENCIA DEL MODELO LINEALIZADO
%__________________________________________________________________________

% A la hora de linealizar el modelo, es necesario anular el
% par de fricción máximo (parámetro del modelo).
% Par de friccion del motor (N.m) eje externo
param(10)=Trmax;
param(10) = 0;
% Modelo linealizado en el punto X0
[matA,matB,matC,matD] = linmod('segway',X0,U0);
%Planta en sistema de estado dx=Ax+Bu Y=Cx+Du
Pss = ss(matA,matB,matC,matD);

%Como podemos ver las tres comparten los mismos polos(propiedad)
%dichos polos son los autovalores de la matriz de estado
polos=eig(matA);
polos(3),
%Vemos que hay un autovalor positivo, por tanto el sistema es inestable.
%__________________________________________________________________________
%                               DISCRETIZACION DEL MODELO
%__________________________________________________________________________

ts = 5e-3;
Pss_d=c2d(Pss, ts, 'zoh');
matAd=Pss_d.a;
matBd=Pss_d.b;
matCd=Pss_d.c;
matDd=Pss_d.d;
matDud=Pss_d.d;
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%   DISEÑO DE REGULADOR PID  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% El objetivo de esta parte del proyecto es analizar la posibilidad de
% diseñar un control PID que mantenga la posición vertical del vehículo

% Obtener la matriz de transferencia entre la tensión común de los
% motores y lastres salidas del modelo: velocidad de avance (m/s),
% velocidad angular de cabeceo(rad/s) y ángulo de cabeceo (rad). Aproximar
% la función de transferencia entre latensión común y el ángulo de cabeceo
% mediante la siguiente función detransferencia, estimando los valores
% numéricos de los parámetros KTH, Tv y Tw:
% P(s)= kth*s/((1+Tv*s)*(1-T^2s^2))

%__________________________________________________________________________
%           Funciones de transferencia para cada entrada/salida
%__________________________________________________________________________
Pzpk = minreal(zpk(Pss));
set(Pzpk,'DisplayFormat','time constant');%No veo que haga nada pero simplente cambia como se representa por consola
Pv=Pzpk(1);
Pw=Pzpk(2);
Pth=Pzpk(3);
%Convertimos Pth a la aproximacion pedida
[z,p,k]=zpkdata(Pth,'v');
Kth = k/p(1)/p(2)/p(3);%Kth = dcgain(Pth/s); 
Tv = 1/p(1);
Tw = sqrt(1/p(2)*1/p(3));
Pth = minreal(Kth*s/(1+Tv*s)/(1-((Tw^2)*s^2)));

%Utilizando parámetros genéricos (KTH, Tv y Tw), demostrar aplicando el
%criterio de Routh-Hurwitz, que no es posible estabilizar el vehículo
%mediante un control PD sin filtrado.

%hace falta añadir un cero que cancele el polo positivo

%Demostrar mediante el criterio de Routh-Hurwitz que sí es posible diseñar
%un control PID en configuración paralelo y sin filtrado que equilibre
%teóricamente elvehículo.

%ahora si podemos cancelar;

%  Obtener un sistema de ecuaciones que permiten diseñar un control PID
%  sinfiltrado (parámetros K, Ti y Td) suponiendo que el polinomio deseado
%  en lazocerrado es s^3 + a2*s^2 + a1*s +a0
% Utilizando, los valores numéricos de los parámetros de la planta,
% seleccionar losvalores numéricos de los parámetros del control para
% disponer en lazo cerrado dedos polos complejos con factor de
% amortiguamiento igual a 0.7, pulsación natural igual a 4.5 rad/s y un
% tercer polo real igual a -25.

%__________________________________________________________________________
%                           HALLAR PARAMETROS PID
%__________________________________________________________________________

p=-25;
seta=0.7;
wn=4.5;

a2=-p+2*seta*wn;
a1=wn^2-2*seta*wn*p;
a0=-p*wn^2;

%hallar los parámetros del control
%den=-Tv*Tw^2;

%resolver estas ecuaciones para Ti, Td, K. Los demás parámetros son
%conocidos
%a2=(-Tw+Ti*Td*k*kth)/den/Ti;
%a1=(Tv+k*kth*Ti)/den/Ti;
%a0=(Ti+k*kth)/den/Ti;

%x=fsolve(@(x) [a2-(-Tw+x(2)*x(3)*x(1)*kth)/den/x(3), a1-(Tv+x(1)*kth*x(2))/den/x(3), a0-(x(3)+x(2)*kth)/den/x(3)], [0.1,0.05,0.03]);
x=fsolve(@(x) [a2-((1-x(1)*Kth*x(2)/Tw^2)/Tv), 
               a1+(1+x(1)*Kth/Tv)/Tw^2, 
               a0+(1+x(1)*Kth/x(3))/Tw^2/Tv], [0.1,0.05,0.03]);

K=x(1);
Td=x(2);
Ti=x(3);
fprintf('__________________________DISEÑO PID_________________________________________________________\n',[wn,seta,p]');
fprintf('Diseño PID: K:%5.3f Td:%5.3f Ti:%5.3f \n',[K,Td,Ti]');
fprintf('Para los parametros: wn:%5.3f seta:%5.3f p:%5.3f \n',[wn,seta,p]');
fprintf('Diseño PID: K:%5.3f Td:%5.3f Ti:%5.3f \n',[K,Td,Ti]');

%__________________________________________________________________________
%                           Condiciones de simulacion
%__________________________________________________________________________

Trmax=0; %0.05;% Par máximo de friccion (Nm)
param(10) = Trmax;
%DEfinimos el punto de equilibrio/operacion _0
vo =0; %velocidad de avance (m/s)
wo= 0; %velocidad angular de cabeceo (rad/s)
tho = 10; %ángulo de cabeceo (grados)
X0=[vo wo tho*pi/180]';
%%Simula___________________________--


%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%   DISEÑO DE UN REGULADOR POR REALIMENTACIÓN DE ESTADO  %%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%__________________________________________________________________________
%                               DISCRETIZACION DEL MODELO
%__________________________________________________________________________

ts = 5e-3; %Ojo comprobar TS estamos usando el discretizado
Pss_d=c2d(Pss, ts, 'zoh');
matAd=Pss_d.a;
matBd=Pss_d.b;
matCd=Pss_d.c;
matDd=Pss_d.d;
matDud=Pss_d.d;

% OBJETIVO: MANTENER EL PUNTO DE EQUILIBRIO % 
% En el modelo incremental todas las variables de estado valen 0 en el 
% punto de equilibrio 
% Estrategia de control: U=-K*X
% Se aplica sobre el modelo incremental en tiempo discreto 
% % X[k+l] = Ad*X[k] +Bd*U[k]= Ad*X[k] +Bd*K*X[k]=(Ad-Bd*K)*X[k]
% La matriz de estado en lazo cerrado es Ad—Bd*K 
% Se fijan las dinámicas en lazo cerrado para que el sistema retorne al 
% punto de equilibrio de forma rápida y bien amortigada 
% Asignación de polos en lazo cerrado 
% Polos del en lazo abierto y en tiempo continuo 
%__________________________________________________________________________
%                               MATRIZ Kcd del control 
%__________________________________________________________________________

polos_la=eig(matA);
w_la=max(polos_la);% pulsación del polo inestable 
% Polos en lazo cerrado: configuración de Butterworth 
wn=0.461*w_la;
seta=0.7;
polos_ad=-5.55*wn; %polo adicional
polos_lc=wn*[-seta+sqrt(1-seta^2)*1j, -seta-sqrt(1-seta^2)*1j].';
% Polos en tiempo discreto 
polosd_lc=exp([polos_lc ; polos_ad]*ts);% z=e^(s*ts)

% Cálculo de la matriz K del control 
Kcd=place (matAd , matBd , polosd_lc) ; 

%__________________________________________________________________________
%                           Condiciones de simulacion
%__________________________________________________________________________

Trmax=0; %0.05;% Par máximo de friccion (Nm)
param(10) = Trmax;
%DEfinimos el punto de equilibrio/operacion _0
vo =0; %velocidad de avance (m/s)
wo= 0; %velocidad angular de cabeceo (rad/s)
tho = 10; %ángulo de cabeceo (grados)
X0=[vo wo tho*pi/180]';
%%Simula___________________________--

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%   CONTROL INTEGRAL DE LA VELOCIDAD DE AVANCE PI  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%__________________________________________________________________________
%                        Ampliacion de matrices de estado
%__________________________________________________________________________

matAad = [Ad zeros(3, 1) ; -Ts*Cd eye(1)];
matBad = [Bd ; -Dd*Ts];
wn=1.1*w_la*0.7;
seta=0.7;
polos_lc=wn*[-seta+sqrt(1-seta^2)*1j, -seta-sqrt(1-seta^2)*1j].';

%Se un cuarto polo en tiempo debido a la nueva variable de estado integral. 
polos_ad=[-5*wn ; -5.01*wn];

%__________________________________________________________________________
%                             MATRIZ de ganancias Kad
%__________________________________________________________________________

polosd_lc=exp([polos_lc; polos_ad]*ts);
Kad=place(matAad, matBad, polosd_lc);
Kcd=Kad(1, 1:3);
Kid=Kad(1,4);

%__________________________________________________________________________
%                           Condiciones de simulacion
%__________________________________________________________________________

Trmax=0; %0.05;% Par máximo de friccion (Nm)
param(10) = Trmax;
%DEfinimos el punto de equilibrio/operacion _0
vo =0; %velocidad de avance (m/s)
wo= 0; %velocidad angular de cabeceo (rad/s)
tho = 10; %ángulo de cabeceo (grados)
X0=[vo wo tho*pi/180]';
%%Simula___________________________--

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%  PARAMETROS SEGUIMIENTO PARED %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ganancia estática giro (rad/s/V)
Km_w=1;
% Constante de tiempo giro (s)
Tm_w=5e-02;
% Abcisa punto A (m)
xA=0;
% Ordenada punto A (m)
yA=-0.09;
% Vector de parametros
param_pared=[Km_w Tm_w xA yA];
% Distancia pared en el punto de operación (mm)
d0 = 100;
% Velocidad de avance en el punto de operación (m/s)
va0 = 0.15;
% Modelo linealizado seguimiento pared
matAp = [-1/Tm_w 0 0 ; 1 0 0 ; 1000*xA 1000*va0 0];
matBp = [ Km_w/Tm_w 0 0; 0 -1 0; 0 0 0];
matCp = eye(3);
matDp = zeros(3,3);

return